/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.39
 * Generated at: 2013-05-28 05:46:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;

public final class FileDownload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


	public String entoKo(String en){
		String korCharSet = null;
		try
		{
			korCharSet = new String(en.getBytes("8859_1"),"KSC5601");
		}
		catch(UnsupportedEncodingException uee)
		{
			System.out.println(uee);
		}
		return korCharSet;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC_KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n");
      out.write(" \r\n");
 
	//응답 헤더의 Content-Type을 세팅한다. 
	response.setContentType("application/x-msdownload"); 

	String savePath = entoKo(request.getParameter("savePath"));	//저장된 파일경로
	String saveName = entoKo(request.getParameter("saveName"));	//중복처리된파일이름 (서버폴더에 존제하는 실제 파일의 이름)
	String orgName = request.getParameter("orgName");		//원본 파일의 이름

	response.setHeader("Content-Disposition","attachment; filename="+orgName); //다운 받는 파일의 이름을 원래 이름으로 설정해준다.
		//Content-dispostion 값을 "attachment; filename="+orgName 으로 대체하겠다는 의미, 즉 다운받아질 파일 이름을 바꿔줌
	File file = new File (savePath+"/"+saveName); 

	byte[] bytestream = new byte[(int)file.length()]; //파일의 크기만큼 바이트배열생성

	FileInputStream filestream = new FileInputStream(file); //파일정보에 포함된 주소상의 실 파일에 빨대 꼽음.
	int i = 0, j = 0; 

	while((i = filestream.read()) != -1)	//파일의 끝까지 읽음.
	{ 
		bytestream[j] = (byte)i; 
		j++; 
	}	//메모리상에 bytestream배열 형태로 떠있음!

	OutputStream outStream = response.getOutputStream(); //리스폰스 객체에서 아웃풋스트림 얻어냄
	outStream.write(bytestream);	//파일을 아웃풋 스트림에 풀어버림 -> 다운로드
	outStream.close();
	filestream.close();
	outStream = null;
	filestream = null;

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
